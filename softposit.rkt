#lang racket

(require ffi/unsafe)
(require math/bigfloat)
;; This file makes racket bindings for all the posit functions

;; Define all types. Note that this file assumes that the softposit code was compiled
;; with SOFTPOSIT_EXACT undefined
(provide (all-defined-out))

(define-cstruct _posit8 ([v _uint8]))
(define-cstruct _posit16 ([v _uint16]))
(define-cstruct _posit32 ([v _uint32]))
(define-cstruct _posit64 ([v _uint64]))
(define-cstruct _posit128 ([v (make-array-type _uint64 2)]))

(define-cstruct _quire8 ([v _uint32]))
(define-cstruct _quire16 ([v (make-array-type _uint64 2)]))
(define-cstruct _quire32 ([v (make-array-type _uint64 8)]))

(define uint32->posit8 (get-ffi-obj "ui32_to_p8" "softposit" (_fun _uint32 -> _posit8)))
(define uint32->posit16 (get-ffi-obj "ui32_to_p16" "softposit" (_fun _uint32 -> _posit16)))
(define uint32->posit32 (get-ffi-obj "ui32_to_p32" "softposit" (_fun _uint32 -> _posit32)))
(define uint64->posit8 (get-ffi-obj "ui64_to_p8" "softposit" (_fun _uint64 -> _posit8)))
(define uint64->posit16 (get-ffi-obj "ui64_to_p16" "softposit" (_fun _uint64 -> _posit16)))
(define uint64->posit32 (get-ffi-obj "ui64_to_p32" "softposit" (_fun _uint64 -> _posit32)))

(define int32->posit8 (get-ffi-obj "i32_to_p8" "softposit" (_fun _int32 -> _posit8)))
(define int32->posit16 (get-ffi-obj "i32_to_p16" "softposit" (_fun _int32 -> _posit16)))
(define int32->posit32 (get-ffi-obj "i32_to_p32" "softposit" (_fun _int32 -> _posit32)))
(define int64->posit8 (get-ffi-obj "i64_to_p8" "softposit" (_fun _int64 -> _posit8)))
(define int64->posit16 (get-ffi-obj "i64_to_p16" "softposit" (_fun _int64 -> _posit16)))
(define int64->posit32 (get-ffi-obj "i64_to_p32" "softposit" (_fun _int64 -> _posit32)))

;; TODO: isNaRP8UI function

;; NOTE: these functions use uint_fastxx_t in the c code
(define posit8->uint32 (get-ffi-obj "p8_to_ui32" "softposit" (_fun _posit8 -> _uint32)))
(define posit8->uint64 (get-ffi-obj "p8_to_ui64" "softposit" (_fun _posit8 -> _uint64)))
(define posit8->int32 (get-ffi-obj "p8_to_i32" "softposit" (_fun _posit8 -> _int32)))
(define posit8->int64 (get-ffi-obj "p8_to_i64" "softposit" (_fun _posit8 -> _int64)))

(define posit8->posit16 (get-ffi-obj "p8_to_p16" "softposit" (_fun _posit8 -> _posit16)))
(define posit8->posit32 (get-ffi-obj "p8_to_p32" "softposit" (_fun _posit8 -> _posit32)))

(define posit8-round-to-int (get-ffi-obj "p8_roundToInt" "softposit" (_fun _posit8 -> _posit8)))
(define posit8-add (get-ffi-obj "p8_add" "softposit" (_fun _posit8 _posit8 -> _posit8)))
(define posit8-sub (get-ffi-obj "p8_sub" "softposit" (_fun _posit8 _posit8 -> _posit8)))
(define posit8-mul (get-ffi-obj "p8_mul" "softposit" (_fun _posit8 _posit8 -> _posit8)))
(define posit8-mulAdd (get-ffi-obj "p8_mulAdd" "softposit" (_fun _posit8 _posit8 _posit8 -> _posit8)))
(define posit8-div (get-ffi-obj "p8_div" "softposit" (_fun _posit8 _posit8 -> _posit8)))
(define posit8-sqrt (get-ffi-obj "p8_sqrt" "softposit" (_fun _posit8 -> _posit8)))

(define posit8-eq? (get-ffi-obj "p8_eq" "softposit" (_fun _posit8 _posit8 -> _bool)))
(define posit8-le (get-ffi-obj "p8_le" "softposit" (_fun _posit8 _posit8 -> _bool)))
(define posit8-lt (get-ffi-obj "p8_lt" "softposit" (_fun _posit8 _posit8 -> _bool)))

;; NOTE: make-quirexx is auto-generated by the define-cstruct so we call them create-quirexx
(define create-quire8 (get-ffi-obj "make_q8" "softposit" (_fun -> _quire8)))
(define create-quire16 (get-ffi-obj "make_q16" "softposit" (_fun -> _quire16)))
(define create-quire32 (get-ffi-obj "make_q32" "softposit" (_fun -> _quire32)))

(define quire8-fdp-add (get-ffi-obj "q8_fdp_add" "softposit" (_fun _quire8 _posit8 _posit8 -> _quire8)))
(define quire8-fdp-sub (get-ffi-obj "q8_fdp_sub" "softposit" (_fun _quire8 _posit8 _posit8 -> _quire8)))
(define quire8->posit8 (get-ffi-obj "q8_to_p8" "softposit" (_fun _quire8 -> _posit8)))

;; TODO: isNaRQ8, isQ8Zero, (consider q8Clr), castQ8, castP8, negP8

(define p8->double (get-ffi-obj "convertP8ToDouble" "softposit" (_fun _posit8 -> _double)))
(define double->p8 (get-ffi-obj "convertDoubleToP8" "softposit" (_fun _double -> _posit8)))

(define posit16->uint32 (get-ffi-obj "p16_to_ui32" "softposit" (_fun _posit16 -> _uint32)))
(define posit16->uint64 (get-ffi-obj "p16_to_ui64" "softposit" (_fun _posit16 -> _uint64)))
(define posit16->int32 (get-ffi-obj "p16_to_i32" "softposit" (_fun _posit16 -> _int32)))
(define posit16->int64 (get-ffi-obj "p16_to_i64" "softposit" (_fun _posit16 -> _int64)))

(define posit16->posit8 (get-ffi-obj "p16_to_p8" "softposit" (_fun _posit16 -> _posit8)))
(define posit16->posit32 (get-ffi-obj "p16_to_p32" "softposit" (_fun _posit16 -> _posit32)))

(define posit16-round-to-int (get-ffi-obj "p16_roundToInt" "softposit" (_fun _posit16 -> _posit16)))
(define posit16-add (get-ffi-obj "p16_add" "softposit" (_fun _posit16 _posit16 -> _posit16)))
(define posit16-sub (get-ffi-obj "p16_sub" "softposit" (_fun _posit16 _posit16 -> _posit16)))
(define posit16-mul (get-ffi-obj "p16_mul" "softposit" (_fun _posit16 _posit16 -> _posit16)))
(define posit16-mulAdd (get-ffi-obj "p16_mulAdd" "softposit" (_fun _posit16 _posit16 _posit16 -> _posit16)))
(define posit16-div (get-ffi-obj "p16_div" "softposit" (_fun _posit16 _posit16 -> _posit16)))
(define posit16-sqrt (get-ffi-obj "p16_sqrt" "softposit" (_fun _posit16 -> _posit16)))

(define posit16-eq? (get-ffi-obj "p16_eq" "softposit" (_fun _posit16 _posit16 -> _bool)))
(define posit16-le (get-ffi-obj "p16_le" "softposit" (_fun _posit16 _posit16 -> _bool)))
(define posit16-lt (get-ffi-obj "p16_lt" "softposit" (_fun _posit16 _posit16 -> _bool)))

(define quire16-fdp-add (get-ffi-obj "q16_fdp_add" "softposit" (_fun _quire16 _posit16 _posit16 -> _quire16)))
(define quire16-fdp-sub (get-ffi-obj "q16_fdp_sub" "softposit" (_fun _quire16 _posit16 _posit16 -> _quire16)))
(define quire16->posit16 (get-ffi-obj "q16_to_p16" "softposit" (_fun _quire16 -> _posit16)))

(define quire16-twos-complement (get-ffi-obj "q16_TwosComplement" "softposit" (_fun _quire16 -> _quire16)))

(define posit16->double (get-ffi-obj "convertP16ToDouble" "softposit" (_fun _posit16 -> _double)))
(define float->posit16 (get-ffi-obj "convertFloatToP16" "softposit" (_fun _float -> _posit16)))
(define double->posit16 (get-ffi-obj "convertDoubleToP16" "softposit" (_fun _double -> _posit16)))

(define posit32->uint32 (get-ffi-obj "p32_to_ui32" "softposit" (_fun _posit32 -> _uint32)))
(define posit32->uint64 (get-ffi-obj "p32_to_ui64" "softposit" (_fun _posit32 -> _uint64)))
(define posit32->int32 (get-ffi-obj "p32_to_i32" "softposit" (_fun _posit32 -> _int32)))
(define posit32->int64 (get-ffi-obj "p32_to_i64" "softposit" (_fun _posit32 -> _int64)))

(define posit32->posit8 (get-ffi-obj "p32_to_p8" "softposit" (_fun _posit32 -> _posit8)))
(define posit32->posit16 (get-ffi-obj "p32_to_p16" "softposit" (_fun _posit32 -> _posit16)))

(define posit32-round-to-int (get-ffi-obj "p32_roundToInt" "softposit" (_fun _posit32 -> _posit32)))
(define posit32-add (get-ffi-obj "p32_add" "softposit" (_fun _posit32 _posit32 -> _posit32)))
(define posit32-sub (get-ffi-obj "p32_sub" "softposit" (_fun _posit32 _posit32 -> _posit32)))
(define posit32-mul (get-ffi-obj "p32_mul" "softposit" (_fun _posit32 _posit32 -> _posit32)))
(define posit32-mulAdd (get-ffi-obj "p32_mulAdd" "softposit" (_fun _posit32 _posit32 _posit32 -> _posit32)))
(define posit32-div (get-ffi-obj "p32_div" "softposit" (_fun _posit32 _posit32 -> _posit32)))
(define posit32-sqrt (get-ffi-obj "p32_sqrt" "softposit" (_fun _posit32 -> _posit32)))

(define posit32-eq? (get-ffi-obj "p32_eq" "softposit" (_fun _posit32 _posit32 -> _bool)))
(define posit32-le (get-ffi-obj "p32_le" "softposit" (_fun _posit32 _posit32 -> _bool)))
(define posit32-lt (get-ffi-obj "p32_lt" "softposit" (_fun _posit32 _posit32 -> _bool)))

(define quire32-fdp-add (get-ffi-obj "q32_fdp_add" "softposit" (_fun _quire32 _posit32 _posit32 -> _quire16)))
(define quire32-fdp-sub (get-ffi-obj "q32_fdp_sub" "softposit" (_fun _quire32 _posit32 _posit32 -> _quire16)))
(define quire32->posit32 (get-ffi-obj "q32_to_p32" "softposit" (_fun _quire32 -> _posit32)))

(define quire32-twos-complement (get-ffi-obj "q32_TwosComplement" "softposit" (_fun _quire32 -> _quire32)))

(define posit32->double (get-ffi-obj "convertP32ToDouble" "softposit" (_fun _posit32 -> _double)))
(define float->posit32 (get-ffi-obj "convertFloatToP32" "softposit" (_fun _float -> _posit32)))
(define double->posit32 (get-ffi-obj "convertDoubleToP32" "softposit" (_fun _double -> _posit32)))

;; TODO: This shouldn't always return true
(struct big-posit16 (v))

;; TODO: This might not be the best way to handle bigfloats
(define (bf-double->posit16 x) (big-posit16 x))
(define (bf-posit16->double x) (big-posit16-v x))
(define (bf-posit16-add x y) (big-posit16 (bf+ (big-posit16-v x) (big-posit16-v y))))
(define (bf-posit16-sub x y) (big-posit16 (bf- (big-posit16-v x) (big-posit16-v y))))
(define (bf-posit16-mul x y) (big-posit16 (bf* (big-posit16-v x) (big-posit16-v y))))
(define (bf-posit16-div x y) (big-posit16 (bf/ (big-posit16-v x) (big-posit16-v y))))
(define (bf-posit16-sqrt x) (big-posit16 (bfsqrt (big-posit16-v x))))
